/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sudokusolver;

import java.awt.Color;
import java.awt.Insets;
import java.util.HashSet;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JTextField;

/**
 *
 * @author: Imtiaz Adar
 * @project: SUDOKU SOLVER
 * @language: JAVA
 * @date: 20/01/2022
 */
public class SUDOKU_ORIGINAL extends javax.swing.JFrame {

    public SUDOKU_ORIGINAL() {
        initComponents();
        
        this.getContentPane().setBackground(Color.WHITE);
        this.setTitle("SUDOKU SOLVER APP - IMTIAZ ADAR");
        
        ImageIcon img = new ImageIcon(getClass().getResource("sudoku.png"));
        this.setIconImage(img.getImage());
        
        jPanel2.setBackground(Color.WHITE);
        TA.setForeground(Color.BLACK);
        TA.setBackground(Color.WHITE);
        TA.setMargin(new Insets(2, 20, 2, 2));
        TA.setBorder(BorderFactory.createCompoundBorder(TA.getBorder(), BorderFactory.createEmptyBorder(2, 55, 5, 10)));
        //jPanel2.add(TA);
        jScrollPane1.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
        //solveButton.setBackground(new Color(20, 20, 20));
        solveButton.setBorder(BorderFactory.createBevelBorder(2, new Color(20, 20, 20), new Color(20, 20, 20)));
        resetButton.setBorder(BorderFactory.createBevelBorder(2, new Color(20, 20, 20), new Color(20, 20, 20)));
        exitButton.setBorder(BorderFactory.createBevelBorder(2, new Color(20, 20, 20), new Color(20, 20, 20)));
        solveButton.setBackground(new Color(51, 0, 102));
        solveButton.setForeground(Color.WHITE);
        resetButton.setBackground(new Color(0, 51, 51));
        resetButton.setForeground(Color.WHITE);
        exitButton.setBackground(new Color(102, 0, 51));
        exitButton.setForeground(Color.WHITE);
        


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        SUDOKULABEL = new javax.swing.JLabel();
        solveButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        INTROADAR = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TA = new javax.swing.JTextArea();
        solvedLabel = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 559, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setToolTipText("");

        SUDOKULABEL.setFont(new java.awt.Font("Ink Free", 1, 24)); // NOI18N
        SUDOKULABEL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SUDOKULABEL.setText("SUDOKU SOLVER APP BY IMTIAZ ADAR");

        solveButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        solveButton.setText("SOLVE");
        solveButton.setToolTipText("Click To Solve Sudoku");
        solveButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        solveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        solveButton.setFocusPainted(false);
        solveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveButtonActionPerformed(evt);
            }
        });

        resetButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        resetButton.setText("RESET");
        resetButton.setToolTipText("Click To Reset Sudoku");
        resetButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.gray));
        resetButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        resetButton.setFocusPainted(false);
        resetButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        exitButton.setText("EXIT");
        exitButton.setToolTipText("Click To Exit");
        exitButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.gray));
        exitButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitButton.setFocusPainted(false);
        exitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        INTROADAR.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        INTROADAR.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        INTROADAR.setText("APP BY IMTIAZ ADAR");

        TA.setColumns(9);
        TA.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        TA.setLineWrap(true);
        TA.setRows(9);
        TA.setTabSize(4);
        TA.setWrapStyleWord(true);
        TA.setAutoscrolls(false);
        TA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        TA.setHighlighter(null);
        TA.setSelectionColor(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(TA);

        solvedLabel.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        solvedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(solveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(INTROADAR, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 46, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(SUDOKULABEL, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addComponent(solvedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(SUDOKULABEL, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(solveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(INTROADAR, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(solvedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel2.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed
        setBoardItems();
        if(sudokuSolver(board)){
            TA.setText("");
            printBoard(board);
           //printBoard2(board);
            System.out.println("Solved");
            solvedLabel.setText("SOLVED !");
        }
        else{
            System.out.println("Not Solved");
            solvedLabel.setText("NOT SOLVED !");
        }
    }//GEN-LAST:event_solveButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        solvedLabel.setText("");
        r = 0; c = 0;
        TA.setText("");
    }//GEN-LAST:event_resetButtonActionPerformed

    int r = 0, c = 0;
    int[][] board = new int[9][9];
    
    char[][] arr2 = new char[9][9];
    public void setBoardItems(){
        char[] arr = TA.getText().toCharArray();
        System.out.println("");
        int k = 0;
        for(int i = 0; i < arr2.length; i++){
            for(int j = 0; j < arr2.length; j++){
                arr2[i][j] = arr[k]; 
                k++;
              //  System.out.print(arr2[i][j] + "");
                
                
            }
            k++;
            System.out.println("");
        }
//        char[][] newarr = new char[9][9];
//        for(int i = 0; i < newarr.length; i++){
//            int k = 0;
//            for(int j = 0; j < arr.length; j++){
//                newarr[i][k] = arr[j];
//                k++;
//            }
//        }
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board.length; j++){
                board[i][j] = Integer.parseInt(Character.toString(arr2[i][j]));
            }
            
        }
        TA.setText("");
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board.length; j++){
                System.out.print(board[i][j] + "");
            }
            System.out.println("");
        }
       
    }
    
    public void printBoard2(int board[][]){
        System.out.println("");
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board.length; j++){
                System.out.print(board[i][j]);
            }
            System.out.println("");
        }
    }
    public void printBoard(int[][] board){
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board.length; j++){
                TA.setText(TA.getText() + Integer.toString(board[i][j]));
            }
            if(i != 8)
                TA.setText(TA.getText() + "\n");
        }
        
    }
    

     private boolean isNextEmpty(int[][] board){
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board.length; j++){
                if(board[i][j] == 0){
                    r = i;
                    c = j;
                    return true;
                }
            }
        }
        r = 0; c = 0;
        return false;
    }

    private boolean rowWiseUnique(int[][] board, int row, int guess){
        for(int k = 0; k < board.length; k++){
            if(board[row][k] == guess)
                return false;
        }
        return true;
    }

    private boolean colWiseUnique(int[][] board, int col, int guess){
        for(int l = 0; l < board.length; l++){
            if(board[l][col] == guess)
                return false;
        }
        return true;
    }

    private boolean blockWise(int[][] board, int row, int col, int guess){
        int row_b = (row / 3) * 3;
        int col_b = (col / 3) * 3;
        for(int i = row_b; i < row_b + 3; i++){
            for(int j = col_b; j < col_b + 3; j++){
                if(board[i][j] == guess){
                    return false;
                }
            }
        }
        return true;
    }

    private boolean isMatched(int[][] board, int row, int col, int guess){
        return rowWiseUnique(board, row, guess) && colWiseUnique(board, col, guess) &&
                blockWise(board, row, col, guess);
    }

    private boolean sudokuSolver(int[][] board){
        boolean isEmpty = isNextEmpty(board);
        int row = r;
        int col = c;

        if(!isEmpty){
            return true;
        }
        else{
            for(int g = 1; g <= 9; g++){
                if(isMatched(board, row, col, g)){
                    board[row][col] = g;
                    if(sudokuSolver(board)){
                        return true;
                    }
                    else{
                        board[row][col] = 0;
                    }
                }
            }
        }
        return false;
    }
    
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SUDOKU_ORIGINAL().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel INTROADAR;
    private javax.swing.JLabel SUDOKULABEL;
    private javax.swing.JTextArea TA;
    private javax.swing.JButton exitButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton solveButton;
    private javax.swing.JLabel solvedLabel;
    // End of variables declaration//GEN-END:variables
   
}
